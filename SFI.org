#+TITLE: SFI
#+OPTIONS: ^:nil
#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup

* Prerequisites

** linux cross platform
#+BEGIN_SRC bash
sudo apt-get install gcc-aarch64-linux-gnu flex bison bc rsync
#+END_SRC
** Bionic-Builder
#+BEGIN_SRC bash
sudo apt-get install -y ccache python3-pip build-essential kernel-package fakeroot libncurses5-dev libssl-dev gcc git gnupg binfmt-support qemu qemu-user-static debootstrap simg2img
#+END_SRC

* [5/5] BUGS

** DONE 注册两个 watchpoint 的 page fault
CLOSED: [2020-11-14 Sat 15:51]

#+begin_src bash
[   61.044980] Unable to handle kernel paging request at virtual address 0000aaaaf56fa278
[   61.058500] Mem abort info:
[   61.064741]   ESR = 0x92000047
[   61.068568]   EC = 0x24: DABT (lower EL), IL = 32 bits
[   61.073703]   SET = 0, FnV = 0
[   61.076753]   EA = 0, S1PTW = 0
[   61.079885] Data abort info:
[   61.082761]   ISV = 0, ISS = 0x00000047
[   61.086595]   CM = 0, WnR = 1
[   61.089564] user pgtable: 4k pages, 48-bit VAs, pgdp=00000001b151e000
[   61.096004] [0000aaaaf56fa278] pgd=00000001b569f003, p4d=00000001b569f003, pud=00000001b5c84003, pmd=00000001b5645003, pte=0000000000000000
[   61.108529] Internal error: Oops: 92000047 [#1] PREEMPT SMP
[   61.114094] Modules linked in: wl18xx wlcore mac80211 libarc4 cfg80211 rfkill wlcore_sdio crct10dif_ce ip_tables x_tables ipv6
[   61.125493] CPU: 7 PID: 429 Comm: awid_user Not tainted 5.9.0-rc7-00450-gd75381b1fdb8 #13
[   61.133663] Hardware name: HiKey970 (DT)
[   61.137578] pstate: 60000000 (nZCv daif -PAN -UAO BTYPE=--)
[   61.143142] pc : 0000ffffa2da404c
[   61.146447] lr : 0000000000001030
[   61.149756] sp : 0000ffffd70e0a00
[   61.153061] x29: 0000ffffd70e0a00 x28: 0000000000000101 
[   61.158366] x27: 0000000000000050 x26: 0000ffffa2e81000 
[   61.163670] x25: 00000000000000ff x24: 0000ffffa2e835d8 
[   61.168975] x23: 0000ffffa2e81ad0 x22: 0000000000001000 
[   61.174279] x21: 0000aaaaf56f9260 x20: 0000ffffa2e81a70 
[   61.179583] x19: 0000000000001010 x18: 0000ffffa2e81a70 
[   61.184888] x17: 0000aaaaf56f8808 x16: 0000000000000007 
[   61.190192] x15: 0000000000000000 x14: 0000000000000002 
[   61.195496] x13: 000000000000270f x12: 0000000000000001 
[   61.200801] x11: 0000000000000000 x10: 0000000000000040 
[   61.206105] x9 : 0000ffffa2eaa2a0 x8 : 0000aaaaf56f8010 
[   61.211409] x7 : 0000000000000000 x6 : 0000000000000000 
[   61.216714] x5 : 0000000000000077 x4 : 0000000000001011 
[   61.222018] x3 : 0000aaaaf56fa270 x2 : 0000000000001011 
[   61.227322] x1 : 0000000000000000 x0 : 000000000001ed91 
[   61.232630] ---[ end trace b453d37e710f74fa ]---
[   61.237249] note: awid_user[429] exited with preempt_count 1
#+end_src

** DONE 注册绑定 current 的 wachpoint
CLOSED: [2020-11-14 Sat 15:51]
preempt_count = 2
#+begin_src bash
BUG: scheduling while atomic: awid_user/427/0x00000002
#+end_src
每注册的 current binded task 多一个 preempt_count

** DONE linux-v5.9
CLOSED: [2020-11-11 Wed 14:02]
*** DONE 注册 watchpoint 之后马上被触发
CLOSED: [2020-11-10 Tue 09:13]

#+BEGIN_SRC

[   59.904699] ------------[ cut here ]------------
[   59.904713] WARNING: CPU: 5 PID: 0 at kernel/rcu/tree.c:630 rcu_eqs_enter.isra.83+0x84/0x90
[   59.904714] Modules linked in: wl18xx wlcore mac80211 libarc4 cfg80211 rfkill wlcore_sdio crct10dif_ce ip_tables x_tables ipv6
[   59.904730] CPU: 5 PID: 0 Comm: swapper/5 Not tainted 5.9.0-rc7-g48fe30379-dirty #15
[   59.904731] Hardware name: HiKey970 (DT)
[   59.904734] pstate: 200003c5 (nzCv DAIF -PAN -UAO BTYPE=--)
[   59.904736] pc : rcu_eqs_enter.isra.83+0x84/0x90
[   59.904742] lr : rcu_idle_enter+0x10/0x20
[   59.904743] sp : ffff8000100c3f10
[   59.904744] x29: ffff8000100c3f10 x28: 0000000000000000
[   59.904746] x27: ffff0001b810d400 x26: 0000000000000000
[   59.904748] x25: 0000000000000000 x24: ffff800011c3a2c4
[   59.904751] x23: ffff80001181cf38 x22: ffff800011c39000
[   59.904752] x21: ffff800011c3a000 x20: 0000000000000020
[   59.904754] x19: ffff800011c3a1c8 x18: ffffffffffffffff
[   59.904755] x17: 0000000000000000 x16: 0000000000000000
[   59.904757] x15: 0000b2efefd0fc7e x14: 00000000000001a8
[   59.904758] x13: 00000000000001a8 x12: 0000000000000001
[   59.904760] x11: 0000000000000001 x10: 00000000000009c0
[   59.904761] x9 : ffff8000100c3ea0 x8 : ffff0001b810de20
[   59.904764] x7 : 00000000ffffffff x6 : 00000000081ac8c2
[   59.904765] x5 : 00ffffffffffffff x4 : ffff800011e7d000
[   59.904767] x3 : 4000000000000002 x2 : ffff80001181e000
[   59.904768] x1 : 4000000000000000 x0 : ffff0001bf3a1e00
[   59.904771] Call trace:
[   59.904773]  rcu_eqs_enter.isra.83+0x84/0x90
[   59.904776]  rcu_idle_enter+0x10/0x20
[   59.904778]  default_idle_call+0x20/0x50
[   59.904780]  do_idle+0x1e4/0x280
[   59.904782]  cpu_startup_entry+0x24/0x68
[   59.904786]  secondary_start_kernel+0x1ac/0x200
[   59.904788] ---[ end trace 973e77280e8fd726 ]---

#+END_SRC

__arm64_sys_watchpoint_register_backtrace
[[file:figures/__arm64_sys_watchpoint_register_backtrace.png]]

trigger_backtrace
[[file:figures/trigger_backtrace.png]]

** [X] watchpoint
CLOSED: [2020-11-11 Wed 14:02]

触发之后无法跳出 trigger function

[[https://stackoverflow.com/questions/28280813/register-wide-hw-breakpoint-continually-triggers-handler-callback][feature]]

** DONE netlink
CLOSED: [2020-11-11 Wed 14:02]
*** DONE 普通用户权限传递给 netlink kernel
CLOSED: [2020-10-15 Thu 18:16]
普通用户无法注册 watchpoint
sudo 权限可注册

- 可用于保护 watchpoint 不被恶意使用



* TODO_LIST
** thread
*** DONE option
CLOSED: [2020-11-12 Thu 14:19]
- 每个线程自己拥有自己的 breakpoint info, 线程切换时 unregister, register
  1. 增加可用 watchpoint 数量
  2. overhead
  3. 加锁位置?

- +所用进程共用 watchpoint, 切换时设置 disable+
  1. 数量有限
  2. 效率

     
*** DONE enable / disable watchpoint domain in context switching
CLOSED: [2020-11-14 Sat 16:54]
    Update watchpoints.

[[file:~/Bionic-Builder/Kernel-SRC/linux/arch/arm64/kernel/hw_breakpoint.c::Update watchpoints.]]

*** KILL inherit watchpoint domain in fork
CLOSED: [2020-11-12 Thu 14:18]
err = arch_dup_task_struct(tsk, orig);

[[file:~/Bionic-Builder/Kernel-SRC/linux/kernel/fork.c::err = arch_dup_task_struct(tsk, orig);]]

- another option
  让拥有权限的进程授权给指定线程
** TODO analyze backtrace
install backtrace
#+begin_src bash
[53.672731] hw_breakpoint_control dump op: 0
[53.672738] CPU: 0 PID: 525 Comm: awid_user Tainted: G        W         5.9.0-rc7-00461-g897b8c7dbd03 #20
[53.672743] Hardware name: HiKey970 (DT)
[53.672749] Call trace:
[53.672756]  dump_backtrace+0x0/0x1c0
[53.672763]  show_stack+0x18/0x28
[53.672765]  dump_stack+0xc8/0x128
[53.672769]  hw_breakpoint_control+0x50/0x290
[53.672774]  arch_install_hw_breakpoint+0x14/0x20
[53.672777]  hw_breakpoint_add+0x44/0x58
[53.672780]  event_sched_in.isra.126+0xc8/0x200
[53.672783]  merge_sched_in+0x1c0/0x3b8
[53.672786]  visit_groups_merge.constprop.134+0x144/0x4a8
[53.672789]  ctx_sched_in+0xec/0x188
[53.672793]  perf_event_sched_in+0x48/0xb0
[53.672796]  __perf_event_task_sched_in+0x1b8/0x1d0
[53.672799]  finish_task_switch+0x188/0x238
[53.672804]  __schedule+0x310/0x668
[53.672807]  schedule+0x78/0x110
[53.672809]  schedule_timeout+0x100/0x268
[53.672812]  wait_woken+0x3c/0x88
[53.672815]  n_tty_read+0x6fc/0xa20
[53.672818]  tty_read+0x94/0x140
[53.672821]  vfs_read+0xa8/0x1e0
[53.672824]  ksys_read+0x6c/0x100
[53.672827]  __arm64_sys_read+0x1c/0x28
[53.672833]  el0_svc_common+0x6c/0x188
[53.672837]  do_el0_svc+0x28/0x98
[53.672840]  el0_sync_handler+0x13c/0x1a8
[53.672843]  el0_sync+0x158/0x180
#+end_src

schedule -> ~/Project/linux/kernel/sched/core.c:
[[file:~/Project/linux/kernel/sched/core.c::asmlinkage __visible void __sched schedule(void)]]


static void __sched notrace __schedule(bool preempt)

[[file:~/Project/linux/kernel/sched/core.c::static void __sched notrace __schedule(bool preempt)]]

uninstall backtrace
#+begin_src bash
[   76.451822] CPU: 1 PID: 400 Comm: awid_user Tainted: G        W         5.9.0-rc7-00460-gbce1cca518c1 #19
[   76.451824] Hardware name: HiKey970 (DT)
[   76.451826] Call trace:
[   76.451829]  dump_backtrace+0x0/0x1c0
[   76.451832]  show_stack+0x18/0x28
[   76.451835]  dump_stack+0xc8/0x128
[   76.451838]  hw_breakpoint_control+0x50/0x290
[   76.451841]  arch_uninstall_hw_breakpoint+0x14/0x20
[   76.451844]  hw_breakpoint_del+0x10/0x20
[   76.451847]  event_sched_out.isra.113+0x7c/0x1b8
[   76.451851]  group_sched_out.part.115+0x48/0xc8
[   76.451853]  ctx_sched_out+0x118/0x200
[   76.451856]  task_ctx_sched_out+0x28/0x40
[   76.451860]  perf_event_exit_task+0xec/0x3b8
[   76.451863]  do_exit+0x32c/0x950
[   76.451866]  do_group_exit+0x48/0xa8
[   76.451868]  __wake_up_parent+0x0/0x30
[   76.451872]  el0_svc_common+0x6c/0x188
[   76.451876]  do_el0_svc+0x28/0x98
[   76.451879]  el0_sync_handler+0x13c/0x1a8
[   76.451881]  el0_sync+0x158/0x180
#+end_src

** TODO setup slots
* system call
[[https://www.kernel.org/doc/html/latest/process/adding-syscalls.html][system call linux kernel docs]]

*** include/linux/syscalls.h
#+BEGIN_SRC c
asmlinkage long __arm64_sys_register_watchpoint(unsigned long addr);
#+END_SRC

*** linux/include/uapi/asm-generic/unistd.h
#+BEGIN_SRC c
#ifdef CONFIG_AWID
#define __NR_register_watchpoint 440                                                                                                                                               
__SYSCALL(__NR_register_watchpoint, sys_register_watchpoint)                                                                                                                       
#endif
#+END_SRC

* script
** linux cross compile
#+BEGIN_SRC bash
sudo make -j20 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- hikey970_defconfig
sudo make -j20 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- all
#+END_SRC

** de-optimize
#+BEGIN_SRC c
__attribute__((optimize("O0"))) function();
#+END_SRC

#+BEGIN_SRC c
static noinline void function();
#+END_SRC

** kgdb
*** host side
#+BEGIN_SRC bash
aarch64-linux-gnu-gdb vmlinux -ex "set serial baud 115200"

target remote /dev/ttyXRUSB0
#+END_SRC

*** target side
#+BEGIN_SRC
sudo echo g > /proc/sysrq-trigger
#+END_SRC


** network
- connect wifi from terminal
 
 #+BEGIN_SRC bash
  sudo nmcli dev wifi connect 'SSID'
 #+END_SRC

- control
 #+BEGIN_SRC bash
 sudo nmcli
 #+END_SRC

** demo board
#+begin_src bash
sudo resize2fs /dev/sdd12
git config --add oh-my-zsh.hide-status 1
git config --add oh-my-zsh.hide-dirty 1    
#+end_src

* DONE USB Serial Debug
CLOSED: [2020-10-01 Thu 20:35]
** [1/1] issue
*** DONE ttyACM 无法输入
CLOSED: [2020-09-21 Mon 21:56]

[[https://discuss.96boards.org/t/how-to-connect-to-console-in-hikey970-in-android/5484/10][XR21V1410 USB-UART]]

#+BEGIN_QUOTE
Hikey970 uses XR21B14 chip for the USB-C debug serial port. The driver for this chip is not available in upstream linux kernel but since it supports part of USB CDC class, it does appear as ttyACM0 port. But this chip uses custom flow control modes which can’t be supported by usb cdc driver and flow control is needed for input. That’s why you can’t type anything onto the default ttyACM0 console but you can see the output.

Coming to your question on some people got it working fully, that is mainly due to the packaging of specific driver for this chip in the distro version. For instance, Ubuntu 18.04 has this driver enabled, so users who have this specific distro will be able to use it without any issues. They will have the console as ttyXRUSB0 instead of ttyACM0.

So if you need to use this port, please build the driver(just google xr21b14 driver, you’ll find it) and load onto your PC.
#+END_QUOTE


[[https://www.maxlinear.com/support/design-tools/software-drivers][XR21V1410 Driver]]

#+BEGIN_SRC bash
sudo rmmod cdc_acm
sudo insmod xr_sub_serial_common.ko
#+END_SRC

重新插拔 Type-C USB, hikey970 被识别为 ~ttyXRUSB~

** 串口调试

- minicom 115200 8N1
- *hardware / software flow control: No*

* DONE register hw_breakpoint linux work flow
CLOSED: [2020-10-01 Thu 20:35]

** ~linux/kernel/events/hw_breakpoint.c *register_wide_hw_breakpoint*~

#+BEGIN_SRC c
/**
 * register_wide_hw_breakpoint - register a wide breakpoint in the kernel
 * @attr: breakpoint attributes
 * @triggered: callback to trigger when we hit the breakpoint
 *
 * @return a set of per_cpu pointers to perf events
 */

struct perf_event * __percpu *
register_wide_hw_breakpoint(struct perf_event_attr *attr,
			    perf_overflow_handler_t triggered,
			    void *context);

...571
		bp = perf_event_create_kernel_counter(attr, cpu, NULL,
						      triggered, context);
#+END_SRC

** ~linux/kernel/events/core.c *perf_event_create_kernel_counter*~

 #+BEGIN_SRC  c
 /**
 ,* perf_event_create_kernel_counter
 ,*
 ,* @attr: attributes of the counter to create
 ,* @cpu: cpu in which the counter is bound
 ,* @task: task to profile (NULL for percpu)
 ,*/
struct perf_event *
perf_event_create_kernel_counter(struct perf_event_attr *attr, int cpu,
				 struct task_struct *task,
				 perf_overflow_handler_t overflow_handler,
				 void *context);
...11952
    event = perf_event_alloc(attr, cpu, task, NULL, NULL,
                 overflow_handler, context, -1);
 #+END_SRC

** ~linux/kernel/events/core.c *perf_event_alloc*~
  
 #+BEGIN_SRC c
 /*
 ,* Allocate and initialize an event structure
 ,*/
static struct perf_event *
perf_event_alloc(struct perf_event_attr *attr, int cpu,
                 struct task_struct *task,
                 struct perf_event *group_leader,
                 struct perf_event *parent_event,
                 perf_overflow_handler_t overflow_handler,
                 void *context, int cgroup_fd)

...11035
	event->cpu		= cpu;
	event->attr		= *attr;
	event->group_leader	= group_leader;
	event->pmu		= NULL;
	event->oncpu		= -1;

	event->parent		= parent_event;

	event->ns		= get_pid_ns(task_active_pid_ns(current));
	event->id		= atomic64_inc_return(&perf_event_id);

...11110
	pmu = perf_init_event(event);
 #+END_SRC

** ~*perf_init_event*~

- perf\_init\_event

#+BEGIN_SRC c

static struct pmu *perf_init_event(struct perf_event *event)
		ret = perf_try_init_event(pmu, event);
#+END_SRC

call ~*pmu.event_init(event)*~

...

- ~linux/kernel/events/hw_breakpoint.c~
 
#+BEGIN_SRC c
static struct pmu perf_breakpoint = {
	.task_ctx_nr	= perf_sw_context, /* could eventually get its own */

	.event_init	= hw_breakpoint_event_init,
	.add		    = hw_breakpoint_add,
	.del	    	= hw_breakpoint_del,
	.start		= hw_breakpoint_start,
	.stop		= hw_breakpoint_stop,
	.read		= hw_breakpoint_pmu_read,
};

#+END_SRC

- ~*hw_breakpoint_event_init*~

#+BEGIN_SRC c
static int hw_breakpoint_event_init(struct perf_event *bp)
{
	int err;

	if (bp->attr.type != PERF_TYPE_BREAKPOINT)
		return -ENOENT;

	/*
	 * no branch sampling for breakpoint events
	 */
	if (has_branch_stack(bp))
		return -EOPNOTSUPP;

	err = register_perf_hw_breakpoint(bp);
	if (err)
		return err;

	bp->destroy = bp_perf_event_destroy;

	return 0;
}
#+END_SRC

- ~*register_perf_hw_breakpoint*~

#+BEGIN_SRC c
int register_perf_hw_breakpoint(struct perf_event *bp)
{
	struct arch_hw_breakpoint hw = { };
	int err;

	err = reserve_bp_slot(bp);
	if (err)
		return err;

	err = hw_breakpoint_parse(bp, &bp->attr, &hw);
	if (err) {
		release_bp_slot(bp);
		return err;
	}

	bp->hw.info = hw;

	return 0;
}
#+END_SRC

reserve / release 加锁

- ~*hw_breakpoint_parse*~
#+BEGIN_SRC c
static int hw_breakpoint_parse(struct perf_event *bp,
			       const struct perf_event_attr *attr,
			       struct arch_hw_breakpoint *hw)
{
	int err;

	err = hw_breakpoint_arch_parse(bp, attr, hw);
	if (err)
		return err;

	if (arch_check_bp_in_kernelspace(hw)) {
		if (attr->exclude_kernel)
			return -EINVAL;
		/*
		 * Don't let unprivileged users set a breakpoint in the trap
		 * path to avoid trap recursion attacks.
		 */
		if (!capable(CAP_SYS_ADMIN))
			return -EPERM;
	}

	return 0;
}
#+END_SRC

- ~*hw_breakpoint_arch_parse*~

 #+BEGIN_SRC c
/*
 ,* Validate the arch-specific HW Breakpoint register settings.
 ,*/
int hw_breakpoint_arch_parse(struct perf_event *bp,
			     const struct perf_event_attr *attr,
			     struct arch_hw_breakpoint *hw)
{
	int ret;
	u64 alignment_mask, offset;

	/* Build the arch_hw_breakpoint. */
	ret = arch_build_bp_info(bp, attr, hw);
...
}
 #+END_SRC

** hw\_breakpoin info parse

- ~arch_build_bp_info~

  解析 ~perf_even->hw->info~

** install hw breakpoint
- ~*hw_breakpoint_add*~

#+BEGIN_SRC c
static int hw_breakpoint_add(struct perf_event *bp, int flags)
{
	if (!(flags & PERF_EF_START))
		bp->hw.state = PERF_HES_STOPPED;

	if (is_sampling_event(bp)) {
		bp->hw.last_period = bp->hw.sample_period;
		perf_swevent_set_period(bp);
	}

	return arch_install_hw_breakpoint(bp);
}
#+END_SRC

- ~linux/arch/arm64/kernel/hw_breakpoint.c *arch_install_hw_breakpoint*~

 #+BEGIN_SRC c
/*
 * Install a perf counter breakpoint.
 */
int arch_install_hw_breakpoint(struct perf_event *bp)
{
	return hw_breakpoint_control(bp, HW_BREAKPOINT_INSTALL);
}

 #+END_SRC

- ~linux/arch/arm64/kernel/hw_breakpoint.c *hw_breakpoint_control*~
#+BEGIN_SRC c
static int hw_breakpoint_control(struct perf_event *bp,
				 enum hw_breakpoint_ops ops)
{
	struct arch_hw_breakpoint *info = counter_arch_bp(bp);
	struct perf_event **slots;
	struct debug_info *debug_info = &current->thread.debug;
	int i, max_slots, ctrl_reg, val_reg, reg_enable;
	enum dbg_active_el dbg_el = debug_exception_level(info->ctrl.privilege);
	u32 ctrl;

	if (info->ctrl.type == ARM_BREAKPOINT_EXECUTE) {
		/* Breakpoint */
		ctrl_reg = AARCH64_DBG_REG_BCR;
		val_reg = AARCH64_DBG_REG_BVR;
		slots = this_cpu_ptr(bp_on_reg);
		max_slots = core_num_brps;
		reg_enable = !debug_info->bps_disabled;
	} else {
		/* Watchpoint */
		ctrl_reg = AARCH64_DBG_REG_WCR;
		val_reg = AARCH64_DBG_REG_WVR;
		slots = this_cpu_ptr(wp_on_reg);
		max_slots = core_num_wrps;
		reg_enable = !debug_info->wps_disabled;
	}

	i = hw_breakpoint_slot_setup(slots, max_slots, bp, ops);

	if (WARN_ONCE(i < 0, "Can't find any breakpoint slot"))
		return i;

	switch (ops) {
	case HW_BREAKPOINT_INSTALL:
		/*
		 * Ensure debug monitors are enabled at the correct exception
		 * level.
		 */
		enable_debug_monitors(dbg_el);
		fallthrough;
	case HW_BREAKPOINT_RESTORE:
		/* Setup the address register. */
		write_wb_reg(val_reg, i, info->address);

		/* Setup the control register. */
		ctrl = encode_ctrl_reg(info->ctrl);
		write_wb_reg(ctrl_reg, i,
			     reg_enable ? ctrl | 0x1 : ctrl & ~0x1);
		break;
	case HW_BREAKPOINT_UNINSTALL:
		/* Reset the control register. */
		write_wb_reg(ctrl_reg, i, 0);

		/*
		 * Release the debug monitors for the correct exception
		 * level.
		 */
		disable_debug_monitors(dbg_el);
		break;
	}

	return 0;
}
#+END_SRC


* arch_hw_breakpoint struct

** arch_hw_breakpoint

#+BEGIN_SRC c
struct hw_perf_event {
    ...;
	struct hw_perf_event		hw;
    ...;
}

struct hw_petf_event{
    ...;
    struct arch_hw_breakpoint info;
    ...;
}

struct arch_hw_breakpoint {
	u64 address;
	u64 trigger;
	struct arch_hw_breakpoint_ctrl ctrl;
};

struct arch_hw_breakpoint_ctrl {
	u32 __reserved	: 19,
	len		: 8,
	type		: 2,
	privilege	: 2,
	enabled		: 1;
};
#+END_SRC

arch_hw_breakpoint->ctrl 位域实现 DBGWCR

* DBG registers

** DBGBCR<n>_EL1
| bits [63:24] | BT, bits [23:20] | LBN, bits [19:16]        | SSC, bits [15:14]      | HMC, bit [13]        | Bits [12:9] | BAS, bits [8:5]      | Bits [4:3] | PMC, bits [2:1]        | E, bit [0]        |
|--------------+------------------+--------------------------+------------------------+----------------------+-------------+----------------------+------------+------------------------+-------------------|
| Reserved     | Breakpoint Type  | Linked breakpoint number | Security state control | Higher mode control. | Reserved    | Byte address select. | Reserved   | Privilege mode control | Enable breakpoint |

DBGBCR<n>_EL1.BT shoulde be 0b000x
** DBGBVR<n>_EL1
| RESS[14:4], bits [63:53] | VA[52:49], bits [52:49] | VA[48:2], bits [48:2]            | Bits [1:0] |
|--------------------------+-------------------------+----------------------------------+------------|
| Reserved                 | Extension to VA[48:2]   | the address value for comparison | Reserved   |

** DBGWCR<n>_EL1
| Bits [63:29] | Bits [23:21] | WT, bit [20] | LBN, bits [19:16]        | SSC, bits [15:14]      | HMC, bit [13]       | BAS, bits [12:5]    | LSC, bits [4:3]    | PAC, bits [2:1]             | E, bit [0] |
|--------------+--------------+--------------+--------------------------+------------------------+---------------------+---------------------+--------------------+-----------------------------+------------|
| Reserved     | Reserved     | Address mask | Linked breakpoint number | Security state control | Higher mode control | Byte address select | Load/store control | Privilege of access control | Enable     |

- ~linked data address~
 在特定 ~context~ 触发

- WT
 0b0 unlinked data address

- LBN
 0b0000

- SSC

- HMC

- BAS

- LSC
  save load control

| LSC  | Meaning                                                                         |
| 0b01 | Match           instructions that load from a watchpointed address.             |
| 0b10 | Match           instructions that store to a watchpointed address.              |
| 0b11 | Match           instructions that load from or store to a watchpointed address. |

- PAC

- E
  0 disabled
  1 enabled

* DONE 修改 BCR, BVR 寄存器
CLOSED: [2020-10-02 Fri 17:14]
:PROPERTIES:
:ID:       50efcdc8-6a76-4e52-bef9-f546dd38fff4
:END:
 - ref [[https://developer.arm.com/docs/ddi0595/h/aarch64-system-registers/dbgbcrn_el1][DBGBCR]]

 - code
  #+BEGIN_SRC c
    case HW_BREAKPOINT_RESTORE:
        /* Setup the address register. */
        write_wb_reg(val_reg, i, info->address);

        /* Setup the control register. */
        ctrl = encode_ctrl_reg(info->ctrl);
        write_wb_reg(ctrl_reg, i,
                 reg_enable ? ctrl | 0x1 : ctrl & ~0x1);
        break;
  #+END_SRC
[[file:~/Bionic-Builder/Kernel-SRC/linux/arch/arm64/kernel/hw_breakpoint.c::case HW_BREAKPOINT_RESTORE:

[[*hw_breakpoin info parse][hw_breakpoin info parse]]

